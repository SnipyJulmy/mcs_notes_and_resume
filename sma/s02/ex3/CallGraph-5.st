Object subclass: #Call
	instanceVariableNames: 'callee args caller'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CallGraph'!
!Call commentStamp: 'onierstrasz 8/17/2016 12:00' prior: 0!
A Call instance represents a method invocation within a CallGraph!


!Call methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:32'!
args: argTypesString 
	args := argTypesString! !

!Call methodsFor: 'initialization' stamp: 'OscarNierstrasz 8/18/2016 11:02:57'!
callee: aJMethod 
	callee := aJMethod! !

!Call methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:33'!
caller: locationString
	"NB: missing full signature, so we cannot identify the unique method"
	caller := locationString! !


!Call methodsFor: 'accessing' stamp: 'onierstrasz 8/18/2016 11:42'!
args
	^ args! !


Object subclass: #CallGraph
	instanceVariableNames: 'calls methods classes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CallGraph'!
!CallGraph commentStamp: 'onierstrasz 8/17/2016 10:33' prior: 0!
This class models a call graph that  has been reconstructed from a Javassist run-time log.!


!CallGraph methodsFor: 'accessing' stamp: 'OscarNierstrasz 8/18/2016 11:02:57'!
methods
	^ methods! !

!CallGraph methodsFor: 'accessing' stamp: 'onierstrasz 8/18/2016 11:27'!
getClass: aClassName 
	^ classes at: aClassName ifAbsentPut: [ JClass new name: aClassName ]! !

!CallGraph methodsFor: 'accessing' stamp: 'onierstrasz 8/18/2016 11:25'!
classes
	^ classes! !

!CallGraph methodsFor: 'accessing' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!
calls
	^ calls! !

!CallGraph methodsFor: 'accessing' stamp: 'onierstrasz 8/18/2016 11:39'!
getMethod: signature
	| fields methodName returnType argTypes |
	fields := $: split: signature.
	returnType := self getClass: (fields at: 1).
	methodName := fields at: 2.
	argTypes := (fields copyFrom: 3 to: fields size) collect: [ :each | self getClass: each ].
	^ methods
		at: signature
		ifAbsentPut: [ 
			JMethod new
				name: methodName;
				returnType: returnType;
				argTypes: argTypes ]! !


!CallGraph methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:26'!
initialize
	methods := Dictionary new.
	classes := Dictionary new! !

!CallGraph methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:26'!
createCall: callString
	| fields callee owner call |
	fields := $| split: callString.
	self assert: fields size = 5.
	self assert: (fields at: 1) size = 0.
	callee := self getMethod: (fields at: 2).
	owner := self getClass: (fields at: 3).
	callee owner: owner.
	call := Call new.
	call	callee: callee;
		args: (fields at:4);
		caller: (fields at: 5).
	callee addCall: call.
	^ call! !

!CallGraph methodsFor: 'initialization' stamp: 'OscarNierstrasz 8/18/2016 11:02:57'!
from: aString
			calls := ((Character cr split: aString)
				select: #notEmpty)
				collect: [ :each | self createCall: each ]! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

CallGraph class
	instanceVariableNames: ''!

!CallGraph class methodsFor: 'examples' stamp: 'OscarNierstrasz 8/18/2016 11:02:57'!
example
	^ self new from: '|java.lang.String:org.clapper.util.html.HTMLUtil.convertCharacterEntities:java.lang.String|STATIC_METHOD|java.lang.String|org.clapper.util.html.test.HTMLEntitiesTest.convertHTMLEntities:47
|org.clapper.util.text.XStringBufBase:org.clapper.util.text.XStringBufBase.append:java.lang.String|org.clapper.util.text.XStringBuffer|java.lang.String|org.clapper.util.html.HTMLUtil.convertCharacterEntities:240
|java.lang.Appendable:org.clapper.util.text.XStringBuffer.getBufferAsAppendable|org.clapper.util.text.XStringBuffer| |org.clapper.util.text.XStringBufBase.append:469
|java.lang.String:org.clapper.util.html.HTMLUtil.convertEntity:java.lang.String|STATIC_METHOD|java.lang.String|org.clapper.util.html.HTMLUtil.convertCharacterEntities:253
|java.util.ResourceBundle:org.clapper.util.html.HTMLUtil.getResourceBundle|STATIC_METHOD| |org.clapper.util.html.HTMLUtil.convertEntity:424'! !


!CallGraph class methodsFor: 'instance creation' stamp: 'OscarNierstrasz 8/18/2016 11:02:57'!
fromFile: fileName
  ^ self new from: fileName asFileReference contents! !


TestCase subclass: #CallGraphFileTest
	instanceVariableNames: 'cg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CallGraph'!

!CallGraphFileTest methodsFor: 'running' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
setUp
	cg := CallGraph fromFile: 'Calls.txt'.! !


!CallGraphFileTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfCalls
	self assert: cg calls size equals: 2475! !

!CallGraphFileTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfMethods
	self assert: cg methods size equals: 168! !

!CallGraphFileTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfClasses
	self assert: cg classes size equals: 67! !

!CallGraphFileTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfMultiplyCalledMethods
	self assert: (cg methods select: [ :m | m calls size > 1 ]) size equals: 141! !

!CallGraphFileTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfPolymorphicMethods
	self assert: (cg methods select: #isPolymorphic) size equals: 10! !

!CallGraphFileTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfStaticMethods
	self assert: (cg methods select: #isStatic) size equals: 10! !


TestCase subclass: #CallGraphTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CallGraph'!

!CallGraphTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfCalls
	self assert: CallGraph example calls size equals: 5! !

!CallGraphTest methodsFor: 'tests' stamp: 'onierstrasz 8/18/2016 11:02'!
testNumberOfMethods
	self assert: CallGraph example methods size equals: 5! !

!CallGraphTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfClasses
	self assert: CallGraph example classes size equals: 6! !

!CallGraphTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfMultiplyCalledMethods
	self assert: (CallGraph example methods select: [ :m | m calls size > 1 ]) size equals: 0! !

!CallGraphTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfPolymorphicMethods
	self assert: (CallGraph example methods select: #isPolymorphic) size equals: 0! !

!CallGraphTest methodsFor: 'tests' stamp: 'OscarNierstrasz 9/23/2014 18:46:32'!
testNumberOfStaticMethods
	self assert: (CallGraph example methods select: #isStatic) size equals: 3! !


Object subclass: #JClass
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CallGraph'!
!JClass commentStamp: 'onierstrasz 8/18/2016 11:41' prior: 0!
Represents a Java class within a CallGraph!


!JClass methodsFor: 'as yet unclassified' stamp: 'onierstrasz 8/18/2016 11:43'!
isStatic
	^ name = 'STATIC_METHOD'! !

!JClass methodsFor: 'as yet unclassified' stamp: 'onierstrasz 8/18/2016 11:30'!
name: classNameOrStatic 
	name := classNameOrStatic! !


Object subclass: #JMethod
	instanceVariableNames: 'name owner calls returnType argTypes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CallGraph'!
!JMethod commentStamp: 'onierstrasz 8/17/2016 12:01' prior: 0!
A JMethod represents a Java method in a Java CallGraph. (NB: the calss Method already exists in the system.)!


!JMethod methodsFor: 'accessing' stamp: 'onierstrasz 8/18/2016 11:41'!
calls
	^ calls! !


!JMethod methodsFor: 'initialization' stamp: 'OscarNierstrasz 8/18/2016 11:02:57'!
name: aString 
	name := aString! !

!JMethod methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:33'!
addCall: aCall 
	calls add: aCall! !

!JMethod methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:39'!
returnType: aJClass
	returnType := aJClass! !

!JMethod methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:40'!
argTypes: aJClassCollection
	argTypes := aJClassCollection! !

!JMethod methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:31'!
owner: aJClass 
	owner := aJClass! !

!JMethod methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 11:34'!
initialize
	super initialize.
	calls := OrderedCollection new! !


!JMethod methodsFor: 'querying' stamp: 'onierstrasz 8/18/2016 11:42'!
isPolymorphic
	^ (calls collect: #args) asSet size > 1! !

!JMethod methodsFor: 'querying' stamp: 'onierstrasz 8/18/2016 11:43'!
isStatic
	^ owner isStatic! !
